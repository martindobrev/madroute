{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { BBox } from './domain/bbox';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class MadRouteService {\n  constructor(http) {\n    this.http = http;\n  }\n  getMadRoutes() {\n    return this.http.get('api/v1/routes');\n  }\n  getMadRouteById(id) {\n    return this.http.get(`api/v1/route/${id}`);\n  }\n  getRouteBoundingBox(route) {\n    const bbox = new BBox(500, 500, -500, -500);\n    route.gpsData.forEach(gpsPosition => {\n      if (gpsPosition.latitude < bbox.minLat) {\n        bbox.minLat = gpsPosition.latitude;\n      }\n      if (gpsPosition.latitude > bbox.maxLat) {\n        bbox.maxLat = gpsPosition.latitude;\n      }\n      if (gpsPosition.longitude < bbox.minLon) {\n        bbox.minLon = gpsPosition.longitude;\n      }\n      if (gpsPosition.longitude > bbox.maxLon) {\n        bbox.maxLon = gpsPosition.longitude;\n      }\n    });\n    return bbox;\n  }\n  createNewRoute(route) {\n    const formData = new FormData();\n    formData.append('file', route.file);\n    formData.append('name', route.name);\n    formData.append('location', route.location);\n    this.http.post('api/v1/routes', formData, {\n      reportProgress: true\n    }).subscribe(data => console.log(data));\n  }\n}\nMadRouteService.ɵfac = function MadRouteService_Factory(t) {\n  return new (t || MadRouteService)(i0.ɵɵinject(i1.HttpClient));\n};\nMadRouteService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MadRouteService,\n  factory: MadRouteService.ɵfac\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}