{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { MadRoute } from './../domain/madroute';\nimport { MadRouteService } from './../mad-route.service';\nimport { MadRouteNavigationService } from '../mad-route-navigation.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../mad-route.service\";\nimport * as i2 from \"../mad-route-navigation.service\";\nconst _c0 = [\"map\"];\nexport class MapComponent {\n  constructor(madRouteService, navigationService) {\n    this.madRouteService = madRouteService;\n    this.navigationService = navigationService;\n    this.olCoordinates = [];\n    this.currentPositionIndex = 0;\n    this.autoCenterMap = false;\n    this.videoOffset = +30;\n    navigationService.timeOffset$.subscribe(timeOffset => {\n      this.currentPositionIndex = this.positionIndexFromTimeOffset(timeOffset) + this.videoOffset;\n      console.log('Time offset changed - trying to change position index to: ' + this.currentPositionIndex);\n      if (this.currentPositionIndex < this.olCoordinates.length) {\n        this.currentPositionFeature.getGeometry().setCoordinates(this.olCoordinates[this.currentPositionIndex]);\n        if (this.autoCenterMap) {\n          this.view.setCenter(this.olCoordinates[this.currentPositionIndex]);\n        }\n      }\n    });\n  }\n  ngOnInit() {\n    this.backgroundVectorSource = new ol.source.Vector({});\n    this.foregroundVectorSource = new ol.source.Vector({});\n    this.view = new ol.View({\n      center: ol.proj.transform([0, 0], 'EPSG:4326', 'EPSG:3857'),\n      zoom: 2\n    });\n    this.map = new ol.Map({\n      layers: [new ol.layer.Tile({\n        source: new ol.source.OSM()\n      }), new ol.layer.Vector({\n        source: this.backgroundVectorSource,\n        style: new ol.style.Style({\n          stroke: new ol.style.Stroke({\n            width: 3,\n            color: [255, 0, 0, 1]\n          }),\n          fill: new ol.style.Fill({\n            color: [0, 0, 255, 0.6]\n          }),\n          image: new ol.style.Circle({\n            fill: new ol.style.Fill({\n              color: 'rgba(102, 160, 255, 0.5)'\n            }),\n            stroke: new ol.style.Stroke({\n              width: 1,\n              color: 'rgba(61, 135, 255, 0.9)'\n            }),\n            radius: 6\n          })\n        })\n      }), new ol.layer.Vector({\n        source: this.foregroundVectorSource,\n        style: new ol.style.Style({\n          image: new ol.style.Circle({\n            fill: new ol.style.Fill({\n              color: 'rgba(255, 255, 255, 0.9)'\n            }),\n            stroke: new ol.style.Stroke({\n              width: 2,\n              color: 'rgba(0, 0, 0, 0.9)'\n            }),\n            radius: 9\n          })\n        })\n      })],\n      view: this.view\n    });\n    if (this.madRoute) {\n      this.olCoordinates = this.transformRouteCoordinates(this.madRoute);\n      this.initialBbox = this.madRouteService.getRouteBoundingBox(this.madRoute);\n      this.currentPositionFeature = new ol.Feature(new ol.geom.Point(this.olCoordinates[0]));\n      // this.currentPositionFeature.setStyle(this.currentPositionStyle);\n      this.foregroundVectorSource.addFeature(this.currentPositionFeature);\n      this.addRouteLine(this.madRoute.gpsData);\n      this.olCoordinates.forEach((olCoordinate, index) => {\n        this.addOlPoint(olCoordinate, index);\n      });\n      this.map.on('click', evt => {\n        const coordinates = evt.coordinate;\n        const feature = evt.target.forEachFeatureAtPixel(evt.pixel, function (featureClicked) {\n          return featureClicked;\n        });\n        if (feature.index) {\n          this.navigationService.changeTimeOffset(feature.index - this.videoOffset);\n        }\n      });\n    }\n  }\n  ngAfterViewInit() {\n    this.map.setTarget(this.mapElement.nativeElement.id);\n    this.centerMadRoute();\n  }\n  centerMadRoute() {\n    if (this.initialBbox) {\n      const boundingExtent = ol.proj.transformExtent(this.initialBbox.toExtent(), ol.proj.get('EPSG:4326'), ol.proj.get('EPSG:3857'));\n      this.view.fit(boundingExtent, this.map.getSize());\n    }\n  }\n  toggleAutoCenter() {\n    this.autoCenterMap = !this.autoCenterMap;\n    console.log('Toggle autocenter ' + this.autoCenterMap);\n  }\n  transformRouteCoordinates(route) {\n    const transformedPositions = [];\n    if (route) {\n      route.gpsData.forEach(gpsPosition => {\n        transformedPositions.push(ol.proj.transform([gpsPosition.longitude, gpsPosition.latitude], ol.proj.get('EPSG:4326'), ol.proj.get('EPSG:3857')));\n      });\n    }\n    return transformedPositions;\n  }\n  positionIndexFromTimeOffset(timeOffset) {\n    // this.madRoute.offset = -180;\n    // if (timeOffset + this.madRoute.offset < 0) {\n    //  return 0;\n    // }\n    const finalTimeOffset = timeOffset;\n    console.log(`timeOffset: ${timeOffset}, finalTimeOffset: ${finalTimeOffset}`);\n    if (finalTimeOffset < 0) {\n      return 0;\n    }\n    return finalTimeOffset;\n  }\n  addRoutePoint(gpsPosition) {\n    const transformedPosition = ol.proj.transform([gpsPosition.longitude, gpsPosition.latitude], ol.proj.get('EPSG:4326'), ol.proj.get('EPSG:3857'));\n    this.backgroundVectorSource.addFeature(new ol.Feature(new ol.geom.Point(transformedPosition)));\n  }\n  addOlPoint(olCoordinate, index) {\n    const newFeature = new ol.Feature(new ol.geom.Point(olCoordinate));\n    newFeature.index = index;\n    this.backgroundVectorSource.addFeature(newFeature);\n  }\n  addRouteLine(gpsCoordinates) {\n    const transformedPositions = [[]];\n    gpsCoordinates.forEach(gpsPosition => {\n      transformedPositions[0].push(ol.proj.transform([gpsPosition.longitude, gpsPosition.latitude], ol.proj.get('EPSG:4326'), ol.proj.get('EPSG:3857')));\n    });\n    this.backgroundVectorSource.addFeature(new ol.Feature(new ol.geom.MultiLineString(transformedPositions)));\n  }\n}\nMapComponent.ɵfac = function MapComponent_Factory(t) {\n  return new (t || MapComponent)(i0.ɵɵdirectiveInject(i1.MadRouteService), i0.ɵɵdirectiveInject(i2.MadRouteNavigationService));\n};\nMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MapComponent,\n  selectors: [[\"app-map\"]],\n  viewQuery: function MapComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mapElement = _t.first);\n    }\n  },\n  inputs: {\n    madRoute: \"madRoute\"\n  },\n  decls: 6,\n  vars: 0,\n  consts: [[\"id\", \"map\"], [\"map\", \"\"], [1, \"uk-button\", \"uk-button-primary\", \"uk-button-mini\", 3, \"click\"], [\"type\", \"button\", \"data-uk-button\", \"\", 1, \"uk-button\", \"uk-button-primary\", \"uk-button-mini\", 3, \"click\"]],\n  template: function MapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0, 1);\n      i0.ɵɵelementStart(2, \"a\", 2);\n      i0.ɵɵlistener(\"click\", function MapComponent_Template_a_click_2_listener() {\n        return ctx.centerMadRoute();\n      });\n      i0.ɵɵtext(3, \"center route\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function MapComponent_Template_button_click_4_listener() {\n        return ctx.toggleAutoCenter();\n      });\n      i0.ɵɵtext(5, \"auto-center\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}