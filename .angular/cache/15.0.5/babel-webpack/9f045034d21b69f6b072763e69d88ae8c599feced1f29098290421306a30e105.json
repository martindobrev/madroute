{"ast":null,"code":"import { ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { MadRouteNavigationService } from '../mad-route-navigation.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../mad-route-navigation.service\";\nconst _c0 = [\"player\"];\nexport class YoutubePlayerComponent {\n  constructor(ref, navigationService) {\n    this.ref = ref;\n    this.navigationService = navigationService;\n    this.timeOffset = 0;\n    this.navigationService.timeOffset$.subscribe(timeOffset => {\n      if (timeOffset !== this.timeOffset) {\n        console.log('CHANGING OFFSET');\n        this.timeOffset = timeOffset;\n        this.seekTo(this.timeOffset);\n      }\n    });\n  }\n  ngOnInit() {\n    window.onYouTubeIframeAPIReady = () => {\n      this.player = new window.YT.Player('player', {\n        height: '480px',\n        width: '640px',\n        videoId: this.videoId,\n        playerVars: {\n          'autoplay': 0,\n          'rel': 0,\n          'controls': 2\n        },\n        events: {\n          'onReady': event => {\n            this.duration = this.player.getDuration();\n            console.log('ON READY', event);\n          },\n          'onStateChange': () => {\n            const state = this.player.getPlayerState();\n            console.log('ON STATE CHANGE!', this.player.getPlayerState());\n            switch (state) {\n              case 0:\n                this.syncTime();\n                this.stopTimer();\n                break;\n              case 1:\n                this.syncTime();\n                this.startTimer();\n                break;\n              case 2:\n                this.syncTime();\n                this.stopTimer();\n                break;\n              case 3:\n                this.syncTime();\n                this.stopTimer();\n                break;\n              default:\n              // do nothing for now\n            }\n          }\n        }\n      });\n    };\n  }\n\n  ngAfterViewInit() {\n    const doc = window.document;\n    const playerApiScript = doc.createElement('script');\n    playerApiScript.type = 'text/javascript';\n    playerApiScript.src = 'https://www.youtube.com/iframe_api';\n    this.playerElement.nativeElement.appendChild(playerApiScript);\n  }\n  playVideo() {\n    this.player.playVideo();\n  }\n  stopVideo() {\n    this.player.stopVideo();\n  }\n  pauseVideo() {\n    this.player.pauseVideo();\n  }\n  seekTo(second) {\n    this.player.seekTo(second);\n  }\n  startTimer() {\n    this.timer = window.setInterval(() => {\n      this.timeOffset++;\n      this.navigationService.changeTimeOffset(this.timeOffset);\n    }, 1000);\n  }\n  stopTimer() {\n    clearInterval(this.timer);\n    this.timer = null;\n  }\n  syncTime() {\n    const oldPlayerTime = this.timeOffset;\n    this.timeOffset = Math.floor(this.player.getCurrentTime());\n    if (this.timeOffset !== oldPlayerTime) {\n      this.navigationService.changeTimeOffset(this.timeOffset);\n    }\n  }\n}\nYoutubePlayerComponent.ɵfac = function YoutubePlayerComponent_Factory(t) {\n  return new (t || YoutubePlayerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.MadRouteNavigationService));\n};\nYoutubePlayerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: YoutubePlayerComponent,\n  selectors: [[\"app-youtube-player\"]],\n  viewQuery: function YoutubePlayerComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.playerElement = _t.first);\n    }\n  },\n  inputs: {\n    videoId: \"videoId\"\n  },\n  decls: 9,\n  vars: 1,\n  consts: [[\"id\", \"player\"], [\"player\", \"\"], [1, \"container\"]],\n  template: function YoutubePlayerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", 0, 1);\n      i0.ɵɵelementStart(2, \"div\", 2)(3, \"h3\");\n      i0.ɵɵtext(4, \"Information\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"p\");\n      i0.ɵɵtext(6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"p\");\n      i0.ɵɵtext(8, \"Current position: \");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate1(\"Duration: \", ctx.duration, \"\");\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}